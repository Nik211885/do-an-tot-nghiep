// <auto-generated />
using System;
using Infrastructure.Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations.BookAuthoringContext
{
    [DbContext(typeof(BookAuthoringDbContext))]
    [Migration("20250526020307_RemoveColumnVersionNumberInBook")]
    partial class RemoveColumnVersionNumberInBook
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.BoundContext.BookAuthoringContext.BookAggregate.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("BookReleaseType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedUerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("Visibility")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Books", "BookAuthoring");
                });

            modelBuilder.Entity("Core.BoundContext.BookAuthoringContext.ChapterAggregate.Chapter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Chapters", "BookAuthoring");
                });

            modelBuilder.Entity("Core.BoundContext.BookAuthoringContext.ChapterAggregate.ChapterVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiffContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiffTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameVersion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("ChapterVersions", "BookAuthoring");
                });

            modelBuilder.Entity("Core.BoundContext.BookAuthoringContext.GenresAggregate.Genres", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("CountBook")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastUpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Genres", "BookAuthoring");
                });

            modelBuilder.Entity("Core.BoundContext.BookAuthoringContext.BookAggregate.Book", b =>
                {
                    b.OwnsMany("Core.BoundContext.BookAuthoringContext.BookAggregate.BookGenres", "Genres", b1 =>
                        {
                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("GenreId")
                                .HasColumnType("uuid");

                            b1.HasKey("BookId", "GenreId");

                            b1.HasIndex("GenreId");

                            b1.ToTable("BookGenres", "BookAuthoring");

                            b1.WithOwner()
                                .HasForeignKey("BookId");

                            b1.HasOne("Core.BoundContext.BookAuthoringContext.GenresAggregate.Genres", null)
                                .WithMany()
                                .HasForeignKey("GenreId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.OwnsOne("Core.BoundContext.BookAuthoringContext.BookAggregate.PolicyReadBook", "PolicyReadBook", b1 =>
                        {
                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Policy")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("character varying(30)");

                            b1.Property<decimal?>("Price")
                                .HasColumnType("numeric");

                            b1.HasKey("BookId");

                            b1.ToTable("Books", "BookAuthoring");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.OwnsMany("Core.BoundContext.BookAuthoringContext.BookAggregate.Tag", "Tags", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<string>("TagName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("Id");

                            b1.HasIndex("BookId");

                            b1.ToTable("BookTags", "BookAuthoring");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.Navigation("Genres");

                    b.Navigation("PolicyReadBook")
                        .IsRequired();

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Core.BoundContext.BookAuthoringContext.ChapterAggregate.Chapter", b =>
                {
                    b.HasOne("Core.BoundContext.BookAuthoringContext.BookAggregate.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.BoundContext.BookAuthoringContext.ChapterAggregate.ChapterVersion", b =>
                {
                    b.HasOne("Core.BoundContext.BookAuthoringContext.ChapterAggregate.Chapter", null)
                        .WithMany("ChapterVersions")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.BoundContext.BookAuthoringContext.ChapterAggregate.Chapter", b =>
                {
                    b.Navigation("ChapterVersions");
                });
#pragma warning restore 612, 618
        }
    }
}
