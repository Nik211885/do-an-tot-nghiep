// <auto-generated />
using System;
using Infrastructure.Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations.ModerationContext
{
    [DbContext(typeof(ModerationDbContext))]
    [Migration("20250601025119_MergeCopyChapterToAppore")]
    partial class MergeCopyChapterToAppore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.BoundContext.ModerationContext.BookApprovalAggregate.ApprovalDecision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BookApprovalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookApprovalsId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DecisionDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAutomated")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModeratorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("BookApprovalId");

                    b.ToTable("ApprovalDecisions", "Moderation");
                });

            modelBuilder.Entity("Core.BoundContext.ModerationContext.BookApprovalAggregate.BookApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BookApprovals", "Moderation");
                });

            modelBuilder.Entity("Core.BoundContext.ModerationContext.BookApprovalAggregate.ApprovalDecision", b =>
                {
                    b.HasOne("Core.BoundContext.ModerationContext.BookApprovalAggregate.BookApproval", null)
                        .WithMany("Decision")
                        .HasForeignKey("BookApprovalId");
                });

            modelBuilder.Entity("Core.BoundContext.ModerationContext.BookApprovalAggregate.BookApproval", b =>
                {
                    b.OwnsOne("Core.BoundContext.ModerationContext.BookApprovalAggregate.CopyrightChapter", "CopyrightChapter", b1 =>
                        {
                            b1.Property<Guid>("BookApprovalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("BookTitle")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("ChapterContent")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ChapterContentPlainText")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ChapterTitle")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset>("DateTimeCopyright")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("boolean");

                            b1.HasKey("BookApprovalId");

                            b1.ToTable("BookApprovals", "Moderation");

                            b1.WithOwner()
                                .HasForeignKey("BookApprovalId");

                            b1.OwnsOne("Core.BoundContext.ModerationContext.BookApprovalAggregate.DigitalSignature", "DigitalSignature", b2 =>
                                {
                                    b2.Property<Guid>("CopyrightChapterBookApprovalId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("SignatureAlgorithm")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)");

                                    b2.Property<string>("SignatureValue")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)");

                                    b2.Property<DateTimeOffset>("SigningDateTime")
                                        .HasColumnType("timestamp with time zone");

                                    b2.HasKey("CopyrightChapterBookApprovalId");

                                    b2.ToTable("BookApprovals", "Moderation");

                                    b2.WithOwner()
                                        .HasForeignKey("CopyrightChapterBookApprovalId");
                                });

                            b1.Navigation("DigitalSignature")
                                .IsRequired();
                        });

                    b.Navigation("CopyrightChapter");
                });

            modelBuilder.Entity("Core.BoundContext.ModerationContext.BookApprovalAggregate.BookApproval", b =>
                {
                    b.Navigation("Decision");
                });
#pragma warning restore 612, 618
        }
    }
}
