// <auto-generated />
using System;
using Infrastructure.Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations.BookReviewContext
{
    [DbContext(typeof(BookReviewDbContext))]
    [Migration("20250609080334_AddConstainsForBookReviewAndCommentAndRating")]
    partial class AddConstainsForBookReviewAndCommentAndRating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.BoundContext.BookReviewContext.BookReviewAggregate.BookReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AverageRating")
                        .HasColumnType("double precision");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RatingCount")
                        .HasColumnType("integer");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BookReviews", "BookReview");
                });

            modelBuilder.Entity("Core.BoundContext.BookReviewContext.CommentAggregate.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookReviewId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("DatetimeCommented")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookReviewId");

                    b.ToTable("Comments", "BookReview");
                });

            modelBuilder.Entity("Core.BoundContext.BookReviewContext.RatingAggregate.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookReviewId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateTimeSubmitted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookReviewId");

                    b.ToTable("Ratings", "BookReview");
                });

            modelBuilder.Entity("Core.BoundContext.BookReviewContext.CommentAggregate.Comment", b =>
                {
                    b.HasOne("Core.BoundContext.BookReviewContext.BookReviewAggregate.BookReview", null)
                        .WithMany()
                        .HasForeignKey("BookReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.BoundContext.BookReviewContext.RatingAggregate.Rating", b =>
                {
                    b.HasOne("Core.BoundContext.BookReviewContext.BookReviewAggregate.BookReview", null)
                        .WithMany()
                        .HasForeignKey("BookReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Core.BoundContext.BookReviewContext.RatingAggregate.RatingStar", "Star", b1 =>
                        {
                            b1.Property<Guid>("RatingId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Star")
                                .HasColumnType("integer");

                            b1.HasKey("RatingId");

                            b1.ToTable("Ratings", "BookReview");

                            b1.WithOwner()
                                .HasForeignKey("RatingId");
                        });

                    b.Navigation("Star")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
